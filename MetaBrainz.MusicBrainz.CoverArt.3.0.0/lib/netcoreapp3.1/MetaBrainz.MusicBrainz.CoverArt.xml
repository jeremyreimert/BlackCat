<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaBrainz.MusicBrainz.CoverArt</name>
    </assembly>
    <members>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.CoverArt">
            <summary>Class providing access to the CoverArt Archive API.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.DefaultPort">
            <summary>The default port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.DefaultUserAgent">
            <summary>The default user agent to use for requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.DefaultWebSite">
            <summary>The default web site to use for requests.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArt.MaxImageSize">
            <summary>
            The maximum allowed image size; an exception is thrown if a response larger than this is received from the CoverArt Archive.
            </summary>
            <remarks>
            The CoverArt does not actually impose a file size limit.
            At the moment, the largest item in the CAA is a PDF of 236MiB, followed by a PNG of 159MiB
            (<a href="http://notlob.eu/caa/largeimages">source</a>).
            Setting the limit at 512MiB therefore seems fairly sensible.
            </remarks>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArt.UserAgentUrl">
            <summary>The URL included in the user agent for requests as part of this library's information.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:MetaBrainz.MusicBrainz.CoverArt.CoverArt"/> class.</summary>
            <param name="userAgent">
            The user agent to use for all requests (should be of the form <c>APPLICATION/VERSION (CONTACT)</c>).
            </param>
            <exception cref="T:System.ArgumentException">
            When the user agent (whether from <paramref name="userAgent"/> or <see cref="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.DefaultUserAgent"/>) is blank.
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.#ctor(System.String,System.Version,System.Uri)">
            <summary>Creates a new instance of the <see cref="T:MetaBrainz.MusicBrainz.CoverArt.CoverArt"/> class.</summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically HTTP or MAILTO) to use in the user agent property for all requests.
            </param>
            <exception cref="T:System.ArgumentException">When <paramref name="application"/> is blank.</exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new instance of the <see cref="T:MetaBrainz.MusicBrainz.CoverArt.CoverArt"/> class.</summary>
            <param name="application">The application name to use in the user agent property for all requests.</param>
            <param name="version">The version number to use in the user agent property for all requests.</param>
            <param name="contact">
            The contact address (typically a URL or email address) to use in the user agent property for all requests.
            </param>
            <exception cref="T:System.ArgumentException">When <paramref name="application"/> is blank.</exception>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.Port">
            <summary>The port number to use for requests (-1 to not specify any explicit port).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.UserAgent">
            <summary>The user agent to use for all requests.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.CoverArt.WebSite">
            <summary>The web site to use for requests.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchBack(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "back" image for the specified release.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>The requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no "back" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchBackAsync(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "back" image for the specified release.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>An asynchronous operation returning the requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no "back" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchFront(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "front" image for the specified release, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>The requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no "fromt" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchFrontAsync(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "front" image for the specified release, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>An asynchronous operation returning the requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no "front" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchGroupFront(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "front" image for the specified release group, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release group ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>The requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release group does not exist (or has no "front" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchGroupFrontAsync(System.Guid,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the main "front" image for the specified release group, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release group ID for which the image is requested.</param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>An asynchronous operation returning the requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release group does not exist (or has no "front" image set);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchGroupRelease(System.Guid)">
            <summary>Fetch information about the cover art associated with the specified MusicBrainz release group (if any).</summary>
            <param name="mbid">The MusicBrainz release group ID for which cover art information is requested.</param>
            <returns>
            A <see cref="T:MetaBrainz.MusicBrainz.CoverArt.Objects.Release"/> object containing information about the cover art for the release group's main release.
            </returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release group does not exist (or has no associated cover art);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchGroupReleaseAsync(System.Guid)">
            <summary>Fetch information about the cover art associated with the specified MusicBrainz release group (if any).</summary>
            <param name="mbid">The MusicBrainz release group ID for which cover art information is requested.</param>
            <returns>
            An asynchronous operation returning a <see cref="T:MetaBrainz.MusicBrainz.CoverArt.Objects.Release"/> object containing information about the cover art for the
            release group's main release.
            </returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release group does not exist (or has no associated cover art);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchImage(System.Guid,System.String,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the specified image for the specified release, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="id">
            The ID of the requested image (as found via <see cref="P:MetaBrainz.MusicBrainz.CoverArt.Objects.Image.Id"/>, or "front"/"back" as special case).
            </param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>The requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release and/or the specified image do not exist;
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchImageAsync(System.Guid,System.String,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)">
            <summary>Fetch the specified image for the specified release, in the specified size.</summary>
            <param name="mbid">The MusicBrainz release ID for which the image is requested.</param>
            <param name="id">
            The ID of the requested image (as found via <see cref="P:MetaBrainz.MusicBrainz.CoverArt.Objects.Image.Id"/>, or "front"/"back" as special case).
            </param>
            <param name="size">
            The requested image size; <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original"/> can be any content type, but the thumbnails are always
            JPEG.
            </param>
            <returns>An asynchronous operation returning the requested image data.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release and/or the specified image do not exist;
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchRelease(System.Guid)">
            <summary>Fetch information about the cover art associated with the specified MusicBrainz release (if any).</summary>
            <param name="mbid">The MusicBrainz release ID for which cover art information is requested.</param>
            <returns>A <see cref="T:MetaBrainz.MusicBrainz.CoverArt.Objects.Release"/> object containing information about the cover art for the release.</returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no associated cover art);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchReleaseAsync(System.Guid)">
            <summary>Fetch information about the cover art associated with the specified MusicBrainz release (if any).</summary>
            <param name="mbid">The MusicBrainz release ID for which cover art information is requested.</param>
            <returns>
            An asynchronous operation returning a <see cref="T:MetaBrainz.MusicBrainz.CoverArt.Objects.Release"/> object containing information about the cover art for the
            release.
            </returns>
            <exception cref="T:System.Net.WebException">
            When something went wrong with the request.
            More details can be found in the exception's <see cref="P:System.Net.WebException.Response"/> property.<br/>
            Possible status codes for the response are:
            <ul><li>
              404 (<see cref="F:System.Net.HttpStatusCode.NotFound"/>) when the release does not exist (or has no associated cover art);
            </li><li>
              503 (<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable"/>) when the server is unavailable, or rate limiting is in effect.
            </li></ul>
            </exception>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage">
            <summary>The raw bytes and accompanying content type for an image downloaded from the CoverArt Archive.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Id">
            <summary>The image's unique ID.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Size">
            <summary>The image's size.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.ContentType">
            <summary>The content type for the image.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Data">
            <summary>The image's raw data.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Decode(System.Boolean,System.Boolean)">
            <summary>Attempts to create an <see cref="T:System.Drawing.Image"/> from <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Data"/>.</summary>
            <returns>A newly-constructed <see cref="T:System.Drawing.Image"/>.</returns>
            <remarks>This complete ignores <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.ContentType"/>.</remarks>
            <exception cref="T:System.ArgumentException">
            When the image data is not valid (or not supported by the <see cref="T:System.Drawing.Image"/> class).
            </exception>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage.Finalize">
            <summary>Finalizes this <see cref="T:MetaBrainz.MusicBrainz.CoverArt.CoverArtImage"/>.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize">
            <summary>Enumeration indicating the desired size of an image to be fetched from the CoverArt Archive.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.Original">
            <summary>The original image as uploaded. This can be of any size or media type.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.SmallThumbnail">
            <summary>The small (250px) thumbnail of the image. Will always be image/jpeg.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.LargeThumbnail">
            <summary>The large (500px) thumbnail of the image. Will always be image/jpeg.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize.HugeThumbnail">
            <summary>The huge (1200px) thumbnail of the image. Will always be image/jpeg.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.CoverArtType">
            <summary>Flag enumeration of the supported image types.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.None">
            <summary>No cover art type has been set.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Front">
            <summary>The album cover, this is the front of the packaging of an audio recording (or in the case of a digital release the image associated with it in a digital media store).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Back">
            <summary>The back of the package of an audio recording, this will often contain the track listing, barcode and copyright information.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Booklet">
            <summary>A small book or group of pages inserted into the compact disc or DVD jewel case or the equivalent packaging for vinyl records and cassettes. Digital releases sometimes include a booklet in a digital file (usually PDF). Booklets often contain liner notes, song lyrics and/or photographs of the artist or band.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Medium">
            <summary>The medium contains the audio recording, for a compact disc release it is the compact disc itself, similarly for a vinyl release it is the vinyl disc itself, etc.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Tray">
            <summary>The image behind or on the tray containing the medium. For jewel cases, this is usually printed on the other side of the piece of paper with the back image.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Obi">
            <summary>An obi is a strip of paper around the spine (or occasionally one of the other edges of the packaging).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Spine">
            <summary>A spine is the edge of the package of an audio recording, it is often the only part visible when recordings are stacked or stored in a shelf. For compact discs the spine is usually part of the back cover scan, and should not be uploaded separately.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Track">
            <summary>Digital releases sometimes have cover art associated with each individual track of a release (typically embedded in the .mp3 files), use this type for images associated with individual tracks.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Liner">
            <summary>A liner is a protective sleeve surrounding a medium (usually a vinyl record, but sometimes a CD), often printed with notes or images.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Sticker">
            <summary>A sticker is an adhesive piece of paper, that is attached to the plastic film or enclosed inside the packaging.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Poster">
            <summary>A poster included with a release. May be the same size as the packaging or larger (in this case it would fold out). Such posters are often printed on the back of a fold-out booklet but are sometimes bundled separately.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Watermark">
            <summary>A watermark is a piece of text or an image which is not part of the cover art but is added by the person who scanned the cover art. Images without any watermarks are preferred where possible - this type is useful in cases where either the only available image is watermarked, or where a better quality watermarked image is uploaded alongside a poorer quality non-watermarked image.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.RawUnedited">
            <summary>An image that is usable for reference, but needs more work to be usable for tagging (for example, an uncropped scan).</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Unknown">
            <summary>An unknown image type name was returned. Please create a ticket so that proper support can be added.</summary>
        </member>
        <member name="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Other">
            <summary>Anything which doesn't fit in any of the other types.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage">
            <summary>An image from the CoverArt Archive.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Approved">
            <summary>Flag indicating whether or not the image is approved.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Back">
            <summary>Flag indicating whether or not this is the image marked as the main "back" image for a release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Comment">
            <summary>The comment attached to the image, if any.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Edit">
            <summary>The MusicBrainz edit ID for the edit that initially added this image.</summary>
            <remarks>For more information about that edit, go to http://musicbrainz.org/edit/{edit-id}.</remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Front">
            <summary>Flag indicating whether or not this is the image marked as the main "front" image for a release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Id">
            <summary>The internal ID of the image. Can be used in a call to <see cref="M:MetaBrainz.MusicBrainz.CoverArt.CoverArt.FetchImage(System.Guid,System.String,MetaBrainz.MusicBrainz.CoverArt.CoverArtImageSize)"/>.</summary>
            <remarks>This ID is determined and set when the image is uploaded, and will never change.</remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Location">
            <summary>URL at which the original uploaded image file can be found (in its original format).</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Thumbnails">
            <summary>The thumbnails generated for the image.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Types">
            <summary>The cover art type(s) matching this image.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.UnknownTypes">
            <summary>
            The unknown cover art type(s) matching this image.
            This will be <see langword="null"/> unless <see cref="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IImage.Types"/> includes <see cref="F:MetaBrainz.MusicBrainz.CoverArt.CoverArtType.Unknown"/>.
            </summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IRelease">
            <summary>A release on the CoverArt Archive.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IRelease.Images">
            <summary>The images available for the release.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IRelease.Location">
            <summary>The URL on the MusicBrainz website where more information about the release can be found.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails">
            <summary>The thumbnails images available for an image on the CovertArt Archive.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Small">
            <summary>The URI for the small thumbnail of the image, if available.</summary>
            <remarks>This field is deprecated and is equivalent to <see cref="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Size250"/>.</remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Large">
            <summary>The URI for the large thumbnail of the image, if available.</summary>
            <remarks>This field is deprecated and is equivalent to <see cref="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Size500"/>.</remarks>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Size250">
            <summary>The URI for the 250-pixel thumbnail of the image, if available.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Size500">
            <summary>The URI for the 500-pixel thumbnail of the image, if available.</summary>
        </member>
        <member name="P:MetaBrainz.MusicBrainz.CoverArt.Interfaces.IThumbnails.Size1200">
            <summary>The URI for the 1200-pixel "thumbnail" of the image, if available.</summary>
        </member>
        <member name="T:MetaBrainz.MusicBrainz.CoverArt.Objects.Release">
            <summary>Class representing a release on the CoverArt Archive.</summary>
        </member>
    </members>
</doc>
